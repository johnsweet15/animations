{"ast":null,"code":"import axios from \"axios\";\nimport { message } from \"antd\";\nconst service = axios.create({});\nconst serviceUtil = {\n  get: async function get(url, config) {\n    try {\n      var response = await service.get(url, config);\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error);\n    }\n\n    return response;\n  },\n  post: async function post(url, data, config) {\n    try {\n      var response = await service.post(url, data, config);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error);\n    }\n\n    return response;\n  }\n};\nexport default serviceUtil; // class Service {\n//   constructor() {\n//     let service = axios.create({});\n//     service.interceptors.response.use(this.handleSuccess, this.handleError);\n//     this.service = service;\n//   }\n//   handleSuccess(response) {\n//     return response;\n//   }\n//   handleError = (error) => {\n//     switch (error?.response?.status) {\n//       case 403:\n//         message.error(\"Invalid session. Please try signing in again.\");\n//         break;\n//       case 404:\n//         message.error(\"Not found\");\n//         break;\n//       default:\n//         message.error(\"Internal server error.\");\n//         break;\n//     }\n//     return Promise.reject(error);\n//   };\n//   get(path, params) {\n//     return this.service.get(path, { params: params });\n//   }\n//   post(path, payload) {\n//     return this.service.post(path, payload);\n//   }\n// }\n// let service = new Service();\n// export default service;","map":{"version":3,"sources":["/Users/johnsweet/repos/starter-frontend/src/services/service.js"],"names":["axios","message","service","create","serviceUtil","get","url","config","response","error","data","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa,EAAb,CAAhB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,eAAeA,GAAf,CAAmBC,GAAnB,EAAwBC,MAAxB,EAAgC;AACnC,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMN,OAAO,CAACG,GAAR,CAAYC,GAAZ,EAAiBC,MAAjB,CAArB;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AAAA;;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd,aAAcA,KAAd,0CAAcA,KAAK,CAAED,QAArB,4EAAc,gBAAiBE,IAA/B,yDAAc,qBAAuBD,KAArC;AACD;;AACD,WAAOD,QAAP;AACD,GARiB;AASlBG,EAAAA,IAAI,EAAE,eAAeA,IAAf,CAAoBL,GAApB,EAAyBI,IAAzB,EAA+BH,MAA/B,EAAuC;AAC3C,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMN,OAAO,CAACS,IAAR,CAAaL,GAAb,EAAkBI,IAAlB,EAAwBH,MAAxB,CAArB;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AAAA;;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd,aAAcA,KAAd,2CAAcA,KAAK,CAAED,QAArB,8EAAc,iBAAiBE,IAA/B,0DAAc,sBAAuBD,KAArC;AACD;;AACD,WAAOD,QAAP;AACD;AAhBiB,CAApB;AAmBA,eAAeJ,WAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import axios from \"axios\";\nimport { message } from \"antd\";\n\nconst service = axios.create({});\n\nconst serviceUtil = {\n  get: async function get(url, config) {\n    try {\n      var response = await service.get(url, config);\n    } catch (error) {\n      message.error(error?.response?.data?.error);\n    }\n    return response;\n  },\n  post: async function post(url, data, config) {\n    try {\n      var response = await service.post(url, data, config);\n    } catch (error) {\n      message.error(error?.response?.data?.error);\n    }\n    return response;\n  },\n};\n\nexport default serviceUtil;\n\n// class Service {\n//   constructor() {\n//     let service = axios.create({});\n\n//     service.interceptors.response.use(this.handleSuccess, this.handleError);\n//     this.service = service;\n//   }\n\n//   handleSuccess(response) {\n//     return response;\n//   }\n\n//   handleError = (error) => {\n//     switch (error?.response?.status) {\n//       case 403:\n//         message.error(\"Invalid session. Please try signing in again.\");\n//         break;\n//       case 404:\n//         message.error(\"Not found\");\n//         break;\n//       default:\n//         message.error(\"Internal server error.\");\n//         break;\n//     }\n//     return Promise.reject(error);\n//   };\n\n//   get(path, params) {\n//     return this.service.get(path, { params: params });\n//   }\n\n//   post(path, payload) {\n//     return this.service.post(path, payload);\n//   }\n// }\n\n// let service = new Service();\n// export default service;\n"]},"metadata":{},"sourceType":"module"}