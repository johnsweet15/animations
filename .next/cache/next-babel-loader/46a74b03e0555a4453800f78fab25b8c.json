{"ast":null,"code":"import axios from \"axios\";\nimport { message } from \"antd\";\nconst service = axios.create({});\nconst serviceUtil = {\n  get: function get(url, config) {\n    return new Promise(async (res, rej) => {\n      try {\n        let response = await service.get(url, config);\n        res(response);\n      } catch (error) {\n        rej(error);\n      }\n    });\n  },\n  post: function post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      try {\n        let response = await service.post(url, data, config);\n        res(response);\n      } catch (error) {\n        console.log(error.response);\n        rej(error);\n      }\n    });\n  }\n};\nexport default serviceUtil; // class Service {\n//   constructor() {\n//     let service = axios.create({});\n//     service.interceptors.response.use(this.handleSuccess, this.handleError);\n//     this.service = service;\n//   }\n//   handleSuccess(response) {\n//     return response;\n//   }\n//   handleError = (error) => {\n//     switch (error?.response?.status) {\n//       case 403:\n//         message.error(\"Invalid session. Please try signing in again.\");\n//         break;\n//       case 404:\n//         message.error(\"Not found\");\n//         break;\n//       default:\n//         message.error(\"Internal server error.\");\n//         break;\n//     }\n//     return Promise.reject(error);\n//   };\n//   get(path, params) {\n//     return this.service.get(path, { params: params });\n//   }\n//   post(path, payload) {\n//     return this.service.post(path, payload);\n//   }\n// }\n// let service = new Service();\n// export default service;","map":{"version":3,"sources":["/Users/johnsweet/repos/starter-frontend/src/services/service.js"],"names":["axios","message","service","create","serviceUtil","get","url","config","Promise","res","rej","response","error","post","data","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa,EAAb,CAAhB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkBC,MAAlB,EAA0B;AAC7B,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAI;AACF,YAAIC,QAAQ,GAAG,MAAMT,OAAO,CAACG,GAAR,CAAYC,GAAZ,EAAiBC,MAAjB,CAArB;AACAE,QAAAA,GAAG,CAACE,QAAD,CAAH;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdF,QAAAA,GAAG,CAACE,KAAD,CAAH;AACD;AACF,KAPM,CAAP;AAQD,GAViB;AAWlBC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcP,GAAd,EAAmBQ,IAAnB,EAAyBP,MAAzB,EAAiC;AACrC,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAI;AACF,YAAIC,QAAQ,GAAG,MAAMT,OAAO,CAACW,IAAR,CAAaP,GAAb,EAAkBQ,IAAlB,EAAwBP,MAAxB,CAArB;AACAE,QAAAA,GAAG,CAACE,QAAD,CAAH;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACD,QAAlB;AACAD,QAAAA,GAAG,CAACE,KAAD,CAAH;AACD;AACF,KARM,CAAP;AASD;AArBiB,CAApB;AAwBA,eAAeR,WAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import axios from \"axios\";\nimport { message } from \"antd\";\n\nconst service = axios.create({});\n\nconst serviceUtil = {\n  get: function get(url, config) {\n    return new Promise(async (res, rej) => {\n      try {\n        let response = await service.get(url, config);\n        res(response);\n      } catch (error) {\n        rej(error);\n      }\n    });\n  },\n  post: function post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      try {\n        let response = await service.post(url, data, config);\n        res(response);\n      } catch (error) {\n        console.log(error.response);\n        rej(error);\n      }\n    });\n  },\n};\n\nexport default serviceUtil;\n\n// class Service {\n//   constructor() {\n//     let service = axios.create({});\n\n//     service.interceptors.response.use(this.handleSuccess, this.handleError);\n//     this.service = service;\n//   }\n\n//   handleSuccess(response) {\n//     return response;\n//   }\n\n//   handleError = (error) => {\n//     switch (error?.response?.status) {\n//       case 403:\n//         message.error(\"Invalid session. Please try signing in again.\");\n//         break;\n//       case 404:\n//         message.error(\"Not found\");\n//         break;\n//       default:\n//         message.error(\"Internal server error.\");\n//         break;\n//     }\n//     return Promise.reject(error);\n//   };\n\n//   get(path, params) {\n//     return this.service.get(path, { params: params });\n//   }\n\n//   post(path, payload) {\n//     return this.service.post(path, payload);\n//   }\n// }\n\n// let service = new Service();\n// export default service;\n"]},"metadata":{},"sourceType":"module"}